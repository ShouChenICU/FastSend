name: Build and publish Docker image

permissions:
  contents: read

env:
  IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/fastsend

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the stable release'
        required: true
        type: string
  release:
    types: published

jobs:
  version-check:
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.get-version.outputs.version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Version check
      id: get-version
      shell: bash
      run: |
        # Exporting version number
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.ref_name }}"
          echo "Release mode detected!"
        elif [ "${{ github.event_name}}" == 'workflow_dispatch' ]; then
          echo "Manual mode detected!"
          VERSION="${{ inputs.version }}"
        fi

        # Check if it's a valid semver
        # We're currently only supporting "major.minor.patch"
        if ! [[ $VERSION =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error title=Version Error::Invalid version number: $VERSION"
          exit 1
        fi
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

  build:
    needs: [version-check]
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-24.04
          arch: linux/amd64
        - os: ubuntu-24.04-arm
          arch: linux/arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Prepare for multi-arch images
      id: prepare
      run: |
        # Export platform pair
        platform=${{ matrix.arch }}
        # Replace "/" with "-"
        echo "PLATFORM_PAIR=${platform//\//-}" >> "$GITHUB_OUTPUT"

    - name: Generate multi-arch metadata
      id: gen-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_TAG }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.arch }}
        labels: ${{ steps.gen-meta.outputs.labels }}
        tags: ${{ env.IMAGE_TAG }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
        # Export digest
        mkdir -pv ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digests
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ steps.prepare.outputs.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [version-check, build]
    
    steps:
    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Generate metadata
      id: metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_TAG }}
        # We've already formatted the version so we can just tag it here
        tags: ${{ needs.version-check.outputs.VERSION }}

    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      run: |
        # Create manifest list
        docker buildx imagetools create \
          $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.IMAGE_TAG }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        # Inspect image
        docker buildx imagetools inspect ${{ env.IMAGE_TAG }}:${{ steps.metadata.outputs.version }}
